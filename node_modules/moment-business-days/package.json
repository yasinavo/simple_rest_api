{
  "_args": [
    [
      {
        "raw": "moment-business-days",
        "scope": null,
        "escapedName": "moment-business-days",
        "name": "moment-business-days",
        "rawSpec": "",
        "spec": "latest",
        "type": "tag"
      },
      "D:\\Node\\simple_app"
    ]
  ],
  "_from": "moment-business-days@latest",
  "_id": "moment-business-days@0.0.10",
  "_inCache": true,
  "_location": "/moment-business-days",
  "_nodeVersion": "4.1.1",
  "_npmUser": {
    "name": "rcchristiane",
    "email": "rcchristiane@gmail.com"
  },
  "_npmVersion": "2.14.4",
  "_phantomChildren": {},
  "_requested": {
    "raw": "moment-business-days",
    "scope": null,
    "escapedName": "moment-business-days",
    "name": "moment-business-days",
    "rawSpec": "",
    "spec": "latest",
    "type": "tag"
  },
  "_requiredBy": [
    "#USER",
    "/"
  ],
  "_resolved": "https://registry.npmjs.org/moment-business-days/-/moment-business-days-0.0.10.tgz",
  "_shasum": "5996cecc96d920e99d33f9abceddf93001b84e16",
  "_shrinkwrap": null,
  "_spec": "moment-business-days",
  "_where": "D:\\Node\\simple_app",
  "author": {
    "name": "Christian Rodriguez Cisneros",
    "email": "rcchristiane@gmail.com"
  },
  "bugs": {
    "url": "https://github.com/kalmecak/moment-business-days/issues"
  },
  "dependencies": {
    "moment": "2.10.x"
  },
  "description": "MomentJS pluin to use business days ",
  "devDependencies": {
    "chai": "^3.3.0",
    "mocha": "^2.3.3"
  },
  "directories": {},
  "dist": {
    "shasum": "5996cecc96d920e99d33f9abceddf93001b84e16",
    "tarball": "https://registry.npmjs.org/moment-business-days/-/moment-business-days-0.0.10.tgz"
  },
  "engine": "node >= 0.10.26",
  "gitHead": "41038f94a80f7e83f55d6814349e82632cf10e0e",
  "homepage": "https://github.com/kalmecak/moment-business-days",
  "keywords": [
    "moment",
    "momentjs",
    "business",
    "days",
    "pluin"
  ],
  "license": "MIT",
  "main": "index.js",
  "maintainers": [
    {
      "name": "rcchristiane",
      "email": "rcchristiane@gmail.com"
    }
  ],
  "name": "moment-business-days",
  "optionalDependencies": {},
  "readme": "# moment-business-days\nThis is a momentJS plugin that allows you to use only business days (Monday to Friday).\n\n**NOTES:**\n* This plugin is for using in NodeJS\n* This plugin is based in [this repo](http://goo.gl/i9m4gJ)\n\n### How to use:\n\n````javascript\n\nvar moment = require('moment-business-days');\n// You'll be able use moment as you normally do\n\n````\n\n#### Use localizaton to configure holidays:\n\n````javascript\n\nvar moment = require('moment-business-days');\n\nvar july4th = '07-04-2015';\nvar laborDay = '09-07-2015';\n\nmoment.locale('us', {\n   holidays: [july4th, laborDay],\n   holidayFormat: 'MM-DD-YYYY' \n});\n\n// moment-business-days will now stop considering these holidays as business days\n\n````\n#### Run Tests:\n\n`npm test`\n\n### Methods:\n\n**businessAdd(days)**\n\nWill add just business days excluding Saturday and Sunday, return a moment date object:\n\n```javascript\n// 30-01-2015 is Friday, DD-MM-YYYY is the format\nmoment('30-01-2015', 'DD-MM-YYYY').businessAdd(3)._d // Wed Feb 04 2015 00:00:00 GMT-0600 (CST)\n```\n\n**businessSubtract(days)**\n\nWill subtract just business days excluding Saturday and Sunday, return a moment date object:\n\n```javascript\n// 27-01-2015 is Tuesday, DD-MM-YYYY is the format\nmoment('27-01-2015', 'DD-MM-YYYY').businessSubtract(3)._d // Thu Jan 22 2015 00:00:00 GMT-0600 (CST)\n```\n\n**isBusinessDay()**\n\nCheck if the date is a business day and return  **true**/**false**:\n\n```javascript\n// 31-01-2015 is Saturday\nmoment('31-01-2015', 'DD-MM-YYYY').isBusinessDay() // false\n\n// 30-01-2015 is Fridat\nmoment('30-01-2015', 'DD-MM-YYYY').isBusinessDay() // true\n```\n\n**nextBusinessDay()**\n\nWill retrieve the next business date as moment date object:\n\n```javascript\n//Next busines day of Friday 30-01-2015\nmoment('30-01-2015', 'DD-MM-YYYY').nextBusinessDay()._d // Mon Feb 02 2015 00:00:00 GMT-0600 (CST)\n\n//Next busines day of Monday 02-02-2015\nmoment('02-02-2015', 'DD-MM-YYYY').nextBusinessDay()._d //Tue Feb 03 2015 00:00:00 GMT-0600 (CST)\n```\n\n**prevBusinessDay()**\n\nWill retrieve the previous business date as moment date object:\n\n```javascript\n//Previous busines day of Monday 02-02-2015\nmoment('02-02-2015', 'DD-MM-YYYY').prevBusinessDay()._d // Fri Jan 30 2015 00:00:00 GMT-0600 (CST)\n\n//Previous busines day of Tuesday 03-02-2015\nmoment('03-02-2015', 'DD-MM-YYYY').prevBusinessDay()._d //Mon Feb 02 2015 00:00:00 GMT-0600 (CST)\n```\n\n**monthBusinessDays()**\n\nRetrieve an array of the business days in the month, each one is a moment object.\n\n```javascript\n//Busines days in month January 2015\nmoment('01-01-2015', 'DD-MM-YYYY').monthBusinessDays()\n\n/*\n[ { _isAMomentObject: true,\n    _i: '01-01-2015',\n    _f: 'DD-MM-YYYY',\n    _isUTC: false,\n    _pf:{ ... },\n    _locale: { ... },\n    _d: Thu Jan 01 2015 00:00:00 GMT-0600 (CST)\n  } {\n   ...\n  },\n  ( ... )\n]\n*/\n```\n\n**monthNaturalDays()**\n\nIs like monthBusinessDays(), but this method will include the weekends on it's response.\n\n**monthBusinessWeeks()**\n\nRetrieve an array of arrays, these arrays are the representation of a business weeks and each week (array) have it own business days (Monday to Friday). There could be the case that one week (array) have less than 5 days, this is because the month started on the middle of the week, for example: the first week of January 2015 just have two days, Thursday 1st and Friday 2nd. **Each day in the week arrays are moment objects.**\n\n```javascript\n//Busines weeks in month January 2015\nmoment('01-01-2015', 'DD-MM-YYYY').monthBusinessWeeks()\n\n/*\n[ [ { _isAMomentObject: true,\n      _i: '01-01-2015',\n      _f: 'DD-MM-YYYY',\n      _isUTC: false,\n      _pf: [...],\n      _locale: [...],\n      _d: Thu Jan 01 2015 00:00:00 GMT-0600 (CST) \n    }, { _isAMomentObject: true,\n      _i: '01-01-2015',\n      _f: 'DD-MM-YYYY',\n      _isUTC: false,\n      _pf: [...],\n      _locale: [...],\n      _d: Fri Jan 02 2015 00:00:00 GMT-0600 (CST) }\n  ],\n  [...]\n]\n*/\n```\n**monthNaturalWeeks()**\n\nIt's like monthBusinessWeeks(), but this method will include weekends on it's response.\n\nThe objects returned by functions are momentjs objects (**except isBusinessDay**) so you can handle it with moment native functions.\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git://github.com/kalmecak/moment-business-days.git"
  },
  "scripts": {
    "mochatest": "mocha tests/*",
    "test": "node ./test.js"
  },
  "version": "0.0.10"
}
